module @limits;

function @step_limit_passes() {
    uint 10; $lauf.limits.set_step_limit;
    uint 3; $lauf.limits.set_step_limit;

    $lauf.limits.step;
    $lauf.limits.step;

    return;
}

function @step_limit_remove() {
    uint 0; $lauf.limits.set_step_limit;
    return;
}

function @step_limit_exceeded_small() {
    uint 10; $lauf.limits.set_step_limit;
    uint 3; $lauf.limits.set_step_limit;

    $lauf.limits.step;
    $lauf.limits.step;
    $lauf.limits.step;

    return;
}
function @step_limit_exceeded_loop() {
    block %entry() {
        uint 100; $lauf.limits.set_step_limit;
        jump %loop();
    }
    block %loop() {
        $lauf.limits.step;
        jump %loop();
    }
}

global const @msg_step_limit_remove = "cannot remove step limit", 0;
global const @msg_step_limit_exceeded = "step limit exceeded", 0;

function @main() {
    call @step_limit_passes;
    function_addr @step_limit_remove; global_addr @msg_step_limit_remove; $lauf.test.assert_panic;
    function_addr @step_limit_exceeded_small; global_addr @msg_step_limit_exceeded; $lauf.test.assert_panic;
    function_addr @step_limit_exceeded_loop; global_addr @msg_step_limit_exceeded; $lauf.test.assert_panic;

    return;
}

