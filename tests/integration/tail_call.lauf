module @tail_call;

function @do_sth(2 => 3) {
    pop 0;
    uint 10;
    uint 20;
    return;
}

function @call(1 => 3) {
    uint 2;
    tail_call @do_sth;
}

function @call_invalid_addr(0 => 0) {
    uint 42; tail_call_indirect (0 => 0);
}
function @call_wrong_signature(0 => 0) {
    function_addr @call; tail_call_indirect (0 => 0);
}

global const @msg_invalid_addr = "invalid function address", 0;

function @main() {
    [
        uint 1;
        call @call;
        uint 20; $lauf.test.assert_eq;
        uint 10; $lauf.test.assert_eq;
        uint 1; $lauf.test.assert_eq;
    ]

    [
        function_addr @call_invalid_addr; global_addr @msg_invalid_addr; $lauf.test.assert_panic;
        function_addr @call_wrong_signature; global_addr @msg_invalid_addr; $lauf.test.assert_panic;
    ]

    return;
}

