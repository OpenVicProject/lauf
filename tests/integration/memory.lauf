module @memory;

function @poison_unpoison_memory() {
    layout $lauf.Value; $lauf.heap.alloc;

    uint 42; pick 1; store_field $lauf.Value 0;
    pick 0; $lauf.memory.poison;

    pick 0; $lauf.memory.unpoison;
    pick 0; load_field $lauf.Value 0; uint 42; $lauf.test.assert_eq;

    $lauf.heap.free;
    return;
}
function @double_poison() {
    layout $lauf.Value; $lauf.heap.alloc;

    pick 0; $lauf.memory.poison;
    pick 0; $lauf.memory.poison;

    $lauf.heap.free;
    return;
}
function @unpoison_non_poisoned() {
    layout $lauf.Value; $lauf.heap.alloc;
    pick 0; $lauf.memory.unpoison;

    $lauf.heap.free;
    return;
}
function @access_poison() {
    layout $lauf.Value; $lauf.heap.alloc;

    pick 0; $lauf.memory.poison;
    uint 42; pick 1; store_field $lauf.Value 0;

    $lauf.heap.free;
    return;
}

function @split_unsplit() {
    layout $lauf.Value; uint 2; $lauf.heap.alloc_array; pick 0;

    uint 1; array_element $lauf.Value; $lauf.memory.split;
    # original_ptr addr1 addr2
    uint 42; pick 2; store_field $lauf.Value 0;
    uint 11; pick 1; store_field $lauf.Value 0;

    # original_ptr addr1 addr2
    $lauf.memory.merge;
    # original_ptr split_ptr
    pick 1; $lauf.test.assert_eq;

    # original_ptr
    pick 0; uint 0; array_element $lauf.Value; load_field $lauf.Value 0; uint 42; $lauf.test.assert_eq;
    pick 0; uint 1; array_element $lauf.Value; load_field $lauf.Value 0; uint 11; $lauf.test.assert_eq;

    $lauf.heap.free;
    return;
}
function @split4() {
    layout $lauf.Value; uint 4; $lauf.heap.alloc_array;

    uint 2; array_element $lauf.Value; $lauf.memory.split;
    # addr1 addr2
    roll 1; uint 1; array_element $lauf.Value; $lauf.memory.split;
    # addr2 addr11 addr12
    roll 2; uint 1; array_element $lauf.Value; $lauf.memory.split;
    # addr11 addr12 addr21 addr22

    $lauf.memory.merge;
    # addr11 addr12 addr2
    roll 2; roll 2; $lauf.memory.merge;
    # addr2 addr1
    roll 1; $lauf.memory.merge;

    # addr
    $lauf.heap.free;
    return;
}
function @split_local() {
    local %array : [2]$lauf.Value;

    local_addr %array; uint 1; array_element $lauf.Value; $lauf.memory.split;
    # addr1 addr2
    uint 42; pick 2; store_field $lauf.Value 0;
    uint 11; pick 1; store_field $lauf.Value 0;
    # addr1 addr2
    $lauf.memory.merge; pop 0;

    local_addr %array; uint 0; array_element $lauf.Value; load_field $lauf.Value 0; uint 42; $lauf.test.assert_eq;
    local_addr %array; uint 1; array_element $lauf.Value; load_field $lauf.Value 0; uint 11; $lauf.test.assert_eq;

    return;
}

function @split_overflow() {
    layout $lauf.Value; uint 2; $lauf.heap.alloc_array;

    uint 1; array_element $lauf.Value; $lauf.memory.split;
    # addr1 addr2
    uint 42; pick 2; uint 0; array_element $lauf.Value; store_field $lauf.Value 0;
    uint 11; pick 2; uint 1; array_element $lauf.Value; store_field $lauf.Value 0;

    # addr1 addr2
    $lauf.memory.merge;
    $lauf.heap.free;
    return;
}
function @split_heap_free() {
    layout $lauf.Value; uint 2; $lauf.heap.alloc_array;

    pick 0; uint 1; array_element $lauf.Value; $lauf.memory.split; pop 0; pop 0;

    $lauf.heap.free;
    return;
}
function @split_local_free() {
    local %array : [2]$lauf.Value;

    local_addr %array; uint 1; array_element $lauf.Value; $lauf.memory.split; pop 0; pop 0;
    return;
}

function @addr_to_ptr() {
    layout $lauf.Value; $lauf.heap.alloc; $lauf.memory.addr_to_int;

    # modify integer part
    uint 100; $lauf.int.uadd_wrap;

    # run GC, which shouldn't remove it as provenance keeps it alive
    $lauf.heap.gc; pop 0;

    # undo modification
    uint 100; $lauf.int.usub_wrap;

    # back to addr and use
    $lauf.memory.int_to_addr;
    uint 10; pick 1; store_field $lauf.Value 0;
    $lauf.heap.free;

    return;
}

function @addr_arithmetic() {
    layout $lauf.Value; uint 10; $lauf.heap.alloc_array;

    pick 0; uint 10; $lauf.memory.addr_add_panic;
    uint 2; $lauf.memory.addr_sub_panic_strict;

    # addr (addr + 8) => addr (addr + 8)
    pick 0; pick 2; uint 1; array_element $lauf.Value; $lauf.test.assert_eq;

    # addr (addr + 8) => addr
    pick 1; $lauf.memory.addr_distance; sint 8; $lauf.test.assert_eq;

    $lauf.heap.free;
    return;
}

global const @const_buffer : $lauf.Value;

function @buffer() {
    layout $lauf.Value; $lauf.heap.alloc;

    pick 0; uint 0; uint 8; $lauf.memory.fill;
    pick 0; global_addr @const_buffer; uint 8; $lauf.memory.cmp; cc eq; $lauf.test.assert;

    pick 0; uint 1; uint 8; $lauf.memory.fill;
    pick 0; global_addr @const_buffer; uint 8; $lauf.memory.cmp; cc gt; $lauf.test.assert;

    pick 0; global_addr @const_buffer; uint 8; $lauf.memory.copy;
    pick 0; global_addr @const_buffer; uint 8; $lauf.memory.cmp; cc eq; $lauf.test.assert;

    $lauf.heap.free;
    return;
}

global const @msg_invalid_address = "invalid address", 0;
global const @msg_invalid_heap_address = "invalid heap address", 0;
global const @msg_invalid_free = "cannot free split allocation", 0;

function @main(0 => 1) export {
    block %entry() {
        call @poison_unpoison_memory;
        function_addr @double_poison; global_addr @msg_invalid_address; $lauf.test.assert_panic;
        function_addr @unpoison_non_poisoned; global_addr @msg_invalid_address; $lauf.test.assert_panic;
        function_addr @access_poison; global_addr @msg_invalid_address; $lauf.test.assert_panic;

        call @addr_to_ptr;
        call @addr_arithmetic;
        call @buffer;

        $lauf.platform.vm;
        branch %vm() %exit(0 => 1);
    }
    block %vm() {
        call @split_unsplit;
        call @split4;
        call @split_local;
        function_addr @split_overflow; global_addr @msg_invalid_address; $lauf.test.assert_panic;
        function_addr @split_heap_free; global_addr @msg_invalid_heap_address; $lauf.test.assert_panic;
        function_addr @split_local_free; global_addr @msg_invalid_free; $lauf.test.assert_panic;

        jump %exit(0 => 1);
    }
    block %exit(0 => 1){
        uint 0; return;
    }
}

