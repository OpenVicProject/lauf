module @vstack;

function @pop0() {
    uint 0;
    uint 1;
    uint 2;

    pop 0;

    uint 1; $lauf.test.assert_eq;
    uint 0; $lauf.test.assert_eq;

    return;
}
function @pop1() {
    uint 0;
    uint 1;
    uint 2;

    pop 1;

    uint 2; $lauf.test.assert_eq;
    uint 0; $lauf.test.assert_eq;

    return;
}
function @pop2() {
    uint 0;
    uint 1;
    uint 2;

    pop 2;

    uint 2; $lauf.test.assert_eq;
    uint 1; $lauf.test.assert_eq;

    return;
}

function @pick0() {
    uint 0;
    uint 1;
    uint 2;

    pick 0;

    uint 2; $lauf.test.assert_eq;
    uint 2; $lauf.test.assert_eq;
    uint 1; $lauf.test.assert_eq;
    uint 0; $lauf.test.assert_eq;

    return;
}
function @pick1() {
    uint 0;
    uint 1;
    uint 2;

    pick 1;

    uint 1; $lauf.test.assert_eq;
    uint 2; $lauf.test.assert_eq;
    uint 1; $lauf.test.assert_eq;
    uint 0; $lauf.test.assert_eq;

    return;
}
function @pick2() {
    uint 0;
    uint 1;
    uint 2;

    pick 2;

    uint 0; $lauf.test.assert_eq;
    uint 2; $lauf.test.assert_eq;
    uint 1; $lauf.test.assert_eq;
    uint 0; $lauf.test.assert_eq;

    return;
}

function @roll0() {
    uint 0;
    uint 1;
    uint 2;

    roll 0;

    uint 2; $lauf.test.assert_eq;
    uint 1; $lauf.test.assert_eq;
    uint 0; $lauf.test.assert_eq;

    return;
}
function @roll1() {
    uint 0;
    uint 1;
    uint 2;

    roll 1;

    uint 1; $lauf.test.assert_eq;
    uint 2; $lauf.test.assert_eq;
    uint 0; $lauf.test.assert_eq;

    return;
}
function @roll2() {
    uint 0;
    uint 1;
    uint 2;

    roll 2;

    uint 0; $lauf.test.assert_eq;
    uint 2; $lauf.test.assert_eq;
    uint 1; $lauf.test.assert_eq;

    return;
}

function @select(1 => 1) {
    uint 0;
    uint 1;

    roll 2;
    select 2;

    return;
}

function @let() {
    uint 0; let %a;
    uint 1; let %b;
    uint 2; let %c;

    pick %c; uint 2; $lauf.test.assert_eq;
    pick %b; uint 1; $lauf.test.assert_eq;
    pick %a; uint 0; $lauf.test.assert_eq;

    roll %c; uint 2; $lauf.test.assert_eq;
    roll %a; uint 0; $lauf.test.assert_eq;
    roll %b; uint 1; $lauf.test.assert_eq;

    return;
}

function @main(0 => 1) export {
    call @pop0;
    call @pop1;
    call @pop2;

    call @pick0;
    call @pick1;
    call @pick2;

    call @roll0;
    call @roll1;
    call @roll2;

    [ uint 0; call @select; ] uint 1; $lauf.test.assert_eq;
    [ uint 1; call @select; ] uint 0; $lauf.test.assert_eq;

    call @let;

    uint 0; return;
}

