module @bits;

function @and() {
    [ uint 0xABCDEF; uint 0x00F000; $lauf.bits.and; ] uint 0x00C000; $lauf.test.assert_eq;
    return;
}
function @or() {
    [ uint 0xABC000; uint 0xDEF; $lauf.bits.or; ] uint 0xABCDEF; $lauf.test.assert_eq;
    return;
}
function @xor() {
    [ uint 0xFFF00; uint 0xFFF; $lauf.bits.xor; ] uint 0xFF0FF; $lauf.test.assert_eq;
    return;
}

function @shl() {
    [ uint 0x1234_5678_9ABC_DEF0; uint 4; $lauf.bits.shl; ] uint 0x2345_6789_ABCD_EF00; $lauf.test.assert_eq;
    return;
}
function @ushr() {
    [ uint 0x1234; uint 4; $lauf.bits.ushr; ] uint 0x123; $lauf.test.assert_eq;
    return;
}
function @sshr() {
    [ sint 0x1234; uint 4; $lauf.bits.sshr; ] sint 0x123; $lauf.test.assert_eq;
    [ sint -2; uint 1; $lauf.bits.sshr; ] sint -1; $lauf.test.assert_eq;
    return;
}

function @main() {
    call @and;
    call @or;
    call @xor;

    call @shl;
    call @ushr;
    call @sshr;

    return;
}

