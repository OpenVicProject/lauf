module @branch;

function @jumps() {
block %entry(0 => 1) {
    uint 0;
    jump %one(1 => 2);
}
block %one(1 => 2) {
    uint 1;
    jump %two(2 => 3);
}
block %two(2 => 3) {
    uint 2;
    jump %three(3 => 2);
}
block %three(3 => 2) {
    uint 2; $lauf.test.assert_eq;
    jump %four(2 => 1);
}
block %four(2 => 1) {
    uint 1; $lauf.test.assert_eq;
    jump %five(1 => 0);
}
block %five(1 => 0) {
    uint 0; $lauf.test.assert_eq;
    return;
}
}

function @branch_true() {
block %entry() {
    uint 11;
    branch %okay() %error();
}
block %okay() {
    return;
}
block %error() {
    $lauf.test.unreachable;
    return;
}
}
function @branch_false() {
block %entry() {
    uint 1;
    branch %okay() %error();
}
block %okay() {
    return;
}
block %error() {
    $lauf.test.unreachable;
    return;
}
}

function @branch_cc_eq(1 => 1) {
block %entry(1 => 0) {
    cc eq;
    branch %if_true(0 => 1) %if_false(0 => 1);
}
block %if_true(0 => 1) {
    uint 1;
    return;
}
block %if_false(0 => 1) {
    uint 0;
    return;
}
}

function @branch_cc_lt(1 => 1) {
block %entry(1 => 0) {
    cc lt;
    branch %if_true(0 => 1) %if_false(0 => 1);
}
block %if_true(0 => 1) {
    uint 1;
    return;
}
block %if_false(0 => 1) {
    uint 0;
    return;
}
}

function @main(0 => 1) {
    call @jumps;

    call @branch_true;
    call @branch_false;

    sint -1; call @branch_cc_eq; uint 0; $lauf.test.assert_eq;
    sint 0; call @branch_cc_eq; uint 1; $lauf.test.assert_eq;
    sint 1; call @branch_cc_eq; uint 0; $lauf.test.assert_eq;

    sint -1; call @branch_cc_lt; uint 1; $lauf.test.assert_eq;
    sint 0; call @branch_cc_lt; uint 0; $lauf.test.assert_eq;
    sint 1; call @branch_cc_lt; uint 0; $lauf.test.assert_eq;

    uint 0; return;
}

